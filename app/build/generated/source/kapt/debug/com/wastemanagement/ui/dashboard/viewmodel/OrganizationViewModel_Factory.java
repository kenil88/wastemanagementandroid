// Generated by Dagger (https://dagger.dev).
package com.wastemanagement.ui.dashboard.viewmodel;

import com.wastemanagement.data.repository.FunctionalRepository;
import com.wastemanagement.network.NetworkHelper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OrganizationViewModel_Factory implements Factory<OrganizationViewModel> {
  private final Provider<FunctionalRepository> repositoryProvider;

  private final Provider<NetworkHelper> networkHelperProvider;

  public OrganizationViewModel_Factory(Provider<FunctionalRepository> repositoryProvider,
      Provider<NetworkHelper> networkHelperProvider) {
    this.repositoryProvider = repositoryProvider;
    this.networkHelperProvider = networkHelperProvider;
  }

  @Override
  public OrganizationViewModel get() {
    return newInstance(repositoryProvider.get(), networkHelperProvider.get());
  }

  public static OrganizationViewModel_Factory create(
      Provider<FunctionalRepository> repositoryProvider,
      Provider<NetworkHelper> networkHelperProvider) {
    return new OrganizationViewModel_Factory(repositoryProvider, networkHelperProvider);
  }

  public static OrganizationViewModel newInstance(FunctionalRepository repository,
      NetworkHelper networkHelper) {
    return new OrganizationViewModel(repository, networkHelper);
  }
}
