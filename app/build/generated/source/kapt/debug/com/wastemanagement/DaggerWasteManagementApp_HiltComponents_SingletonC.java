// Generated by Dagger (https://dagger.dev).
package com.wastemanagement;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.wastemanagement.core.BaseActivity;
import com.wastemanagement.core.BaseActivity_MembersInjector;
import com.wastemanagement.core.BaseFragment;
import com.wastemanagement.core.BaseFragment_MembersInjector;
import com.wastemanagement.data.api.ApiHelper;
import com.wastemanagement.data.api.ApiHelperImpl;
import com.wastemanagement.data.api.ApiService;
import com.wastemanagement.data.repository.AuthRepository;
import com.wastemanagement.data.repository.FunctionalRepository;
import com.wastemanagement.di.module.ApplicationModule;
import com.wastemanagement.di.module.ApplicationModule_ProvideApiHelperFactory;
import com.wastemanagement.di.module.ApplicationModule_ProvideApiServiceFactory;
import com.wastemanagement.di.module.ApplicationModule_ProvideBaseUrlFactory;
import com.wastemanagement.di.module.ApplicationModule_ProvideOkHttpClientFactory;
import com.wastemanagement.di.module.ApplicationModule_ProvideRetrofitFactory;
import com.wastemanagement.network.NetworkHelper;
import com.wastemanagement.preferences.Preferences;
import com.wastemanagement.ui.auth.viewmodel.AuthViewModel;
import com.wastemanagement.ui.auth.viewmodel.AuthViewModel_HiltModules_KeyModule_ProvideFactory;
import com.wastemanagement.ui.dashboard.viewmodel.CategoryViewModel;
import com.wastemanagement.ui.dashboard.viewmodel.CategoryViewModel_HiltModules_KeyModule_ProvideFactory;
import com.wastemanagement.ui.dashboard.viewmodel.DonationRequestViewModel;
import com.wastemanagement.ui.dashboard.viewmodel.DonationRequestViewModel_HiltModules_KeyModule_ProvideFactory;
import com.wastemanagement.ui.dashboard.viewmodel.OrganizationViewModel;
import com.wastemanagement.ui.dashboard.viewmodel.OrganizationViewModel_HiltModules_KeyModule_ProvideFactory;
import com.wastemanagement.ui.dashboard.viewmodel.ProfileVIewModel;
import com.wastemanagement.ui.dashboard.viewmodel.ProfileVIewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerWasteManagementApp_HiltComponents_SingletonC extends WasteManagementApp_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final ApplicationModule applicationModule;

  private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC = this;

  private volatile Object preferences = new MemoizedSentinel();

  private volatile Object networkHelper = new MemoizedSentinel();

  private volatile Object okHttpClient = new MemoizedSentinel();

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object apiService = new MemoizedSentinel();

  private volatile Object apiHelper = new MemoizedSentinel();

  private DaggerWasteManagementApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam,
      ApplicationModule applicationModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.applicationModule = applicationModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  private Preferences preferences() {
    Object local = preferences;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = preferences;
        if (local instanceof MemoizedSentinel) {
          local = new Preferences(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          preferences = DoubleCheck.reentrantCheck(preferences, local);
        }
      }
    }
    return (Preferences) local;
  }

  private NetworkHelper networkHelper() {
    Object local = networkHelper;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = networkHelper;
        if (local instanceof MemoizedSentinel) {
          local = new NetworkHelper(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          networkHelper = DoubleCheck.reentrantCheck(networkHelper, local);
        }
      }
    }
    return (NetworkHelper) local;
  }

  private OkHttpClient okHttpClient() {
    Object local = okHttpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = okHttpClient;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideOkHttpClientFactory.provideOkHttpClient(applicationModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), preferences());
          okHttpClient = DoubleCheck.reentrantCheck(okHttpClient, local);
        }
      }
    }
    return (OkHttpClient) local;
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideRetrofitFactory.provideRetrofit(applicationModule, okHttpClient(), ApplicationModule_ProvideBaseUrlFactory.provideBaseUrl(applicationModule));
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private ApiService apiService() {
    Object local = apiService;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiService;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideApiServiceFactory.provideApiService(applicationModule, retrofit());
          apiService = DoubleCheck.reentrantCheck(apiService, local);
        }
      }
    }
    return (ApiService) local;
  }

  private ApiHelperImpl apiHelperImpl() {
    return new ApiHelperImpl(apiService());
  }

  private ApiHelper apiHelper() {
    Object local = apiHelper;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiHelper;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideApiHelperFactory.provideApiHelper(applicationModule, apiHelperImpl());
          apiHelper = DoubleCheck.reentrantCheck(apiHelper, local);
        }
      }
    }
    return (ApiHelper) local;
  }

  @Override
  public void injectWasteManagementApp(WasteManagementApp wasteManagementApp) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private ApplicationModule applicationModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public WasteManagementApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (applicationModule == null) {
        this.applicationModule = new ApplicationModule();
      }
      return new DaggerWasteManagementApp_HiltComponents_SingletonC(applicationContextModule, applicationModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements WasteManagementApp_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(
        DaggerWasteManagementApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public WasteManagementApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityRetainedCImpl extends WasteManagementApp_HiltComponents.ActivityRetainedC {
    private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;


    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private static final class ActivityCBuilder implements WasteManagementApp_HiltComponents.ActivityC.Builder {
      private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private Activity activity;

      private ActivityCBuilder(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public WasteManagementApp_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
      }
    }

    private static final class ActivityCImpl extends WasteManagementApp_HiltComponents.ActivityC {
      private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl = this;

      private ActivityCImpl(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      @Override
      public void injectBaseActivity(BaseActivity baseActivity) {
        injectBaseActivity2(baseActivity);
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
      }

      @Override
      public Set<String> getViewModelKeys() {
        return SetBuilder.<String>newSetBuilder(5).add(AuthViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(CategoryViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(DonationRequestViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(OrganizationViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ProfileVIewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      private BaseActivity injectBaseActivity2(BaseActivity instance) {
        BaseActivity_MembersInjector.injectPreferences(instance, singletonC.preferences());
        BaseActivity_MembersInjector.injectNetworkHelper(instance, singletonC.networkHelper());
        return instance;
      }

      private static final class FragmentCBuilder implements WasteManagementApp_HiltComponents.FragmentC.Builder {
        private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private Fragment fragment;

        private FragmentCBuilder(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public WasteManagementApp_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragment);
        }
      }

      private static final class FragmentCI extends WasteManagementApp_HiltComponents.FragmentC {
        private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final FragmentCI fragmentCI = this;

        private FragmentCI(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            Fragment fragmentParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }

        @Override
        public void injectBaseFragment(BaseFragment baseFragment) {
          injectBaseFragment2(baseFragment);
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return activityCImpl.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI);
        }

        private BaseFragment injectBaseFragment2(BaseFragment instance) {
          BaseFragment_MembersInjector.injectPreferences(instance, singletonC.preferences());
          BaseFragment_MembersInjector.injectNetworkHelper(instance, singletonC.networkHelper());
          return instance;
        }

        private static final class ViewWithFragmentCBuilder implements WasteManagementApp_HiltComponents.ViewWithFragmentC.Builder {
          private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private View view;

          private ViewWithFragmentCBuilder(
              DaggerWasteManagementApp_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;
          }

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public WasteManagementApp_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI, view);
          }
        }

        private static final class ViewWithFragmentCI extends WasteManagementApp_HiltComponents.ViewWithFragmentC {
          private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private final ViewWithFragmentCI viewWithFragmentCI = this;

          private ViewWithFragmentCI(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI, View viewParam) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;


          }
        }
      }

      private static final class ViewCBuilder implements WasteManagementApp_HiltComponents.ViewC.Builder {
        private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private View view;

        private ViewCBuilder(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public WasteManagementApp_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(singletonC, activityRetainedCImpl, activityCImpl, view);
        }
      }

      private static final class ViewCI extends WasteManagementApp_HiltComponents.ViewC {
        private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final ViewCI viewCI = this;

        private ViewCI(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            View viewParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }
      }
    }

    private static final class ViewModelCBuilder implements WasteManagementApp_HiltComponents.ViewModelC.Builder {
      private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private SavedStateHandle savedStateHandle;

      private ViewModelCBuilder(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public WasteManagementApp_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
      }
    }

    private static final class ViewModelCImpl extends WasteManagementApp_HiltComponents.ViewModelC {
      private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl = this;

      private volatile Provider<AuthViewModel> authViewModelProvider;

      private volatile Provider<CategoryViewModel> categoryViewModelProvider;

      private volatile Provider<DonationRequestViewModel> donationRequestViewModelProvider;

      private volatile Provider<OrganizationViewModel> organizationViewModelProvider;

      private volatile Provider<ProfileVIewModel> profileVIewModelProvider;

      private ViewModelCImpl(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      private AuthRepository authRepository() {
        return new AuthRepository(singletonC.apiHelper());
      }

      private AuthViewModel authViewModel() {
        return new AuthViewModel(authRepository(), singletonC.networkHelper());
      }

      private Provider<AuthViewModel> authViewModelProvider() {
        Object local = authViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
          authViewModelProvider = (Provider<AuthViewModel>) local;
        }
        return (Provider<AuthViewModel>) local;
      }

      private FunctionalRepository functionalRepository() {
        return new FunctionalRepository(singletonC.apiHelper());
      }

      private CategoryViewModel categoryViewModel() {
        return new CategoryViewModel(functionalRepository(), singletonC.networkHelper());
      }

      private Provider<CategoryViewModel> categoryViewModelProvider() {
        Object local = categoryViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
          categoryViewModelProvider = (Provider<CategoryViewModel>) local;
        }
        return (Provider<CategoryViewModel>) local;
      }

      private DonationRequestViewModel donationRequestViewModel() {
        return new DonationRequestViewModel(functionalRepository(), singletonC.networkHelper());
      }

      private Provider<DonationRequestViewModel> donationRequestViewModelProvider() {
        Object local = donationRequestViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
          donationRequestViewModelProvider = (Provider<DonationRequestViewModel>) local;
        }
        return (Provider<DonationRequestViewModel>) local;
      }

      private OrganizationViewModel organizationViewModel() {
        return new OrganizationViewModel(functionalRepository(), singletonC.networkHelper());
      }

      private Provider<OrganizationViewModel> organizationViewModelProvider() {
        Object local = organizationViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
          organizationViewModelProvider = (Provider<OrganizationViewModel>) local;
        }
        return (Provider<OrganizationViewModel>) local;
      }

      private ProfileVIewModel profileVIewModel() {
        return new ProfileVIewModel(functionalRepository(), singletonC.networkHelper());
      }

      private Provider<ProfileVIewModel> profileVIewModelProvider() {
        Object local = profileVIewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
          profileVIewModelProvider = (Provider<ProfileVIewModel>) local;
        }
        return (Provider<ProfileVIewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(5).put("com.wastemanagement.ui.auth.viewmodel.AuthViewModel", (Provider) authViewModelProvider()).put("com.wastemanagement.ui.dashboard.viewmodel.CategoryViewModel", (Provider) categoryViewModelProvider()).put("com.wastemanagement.ui.dashboard.viewmodel.DonationRequestViewModel", (Provider) donationRequestViewModelProvider()).put("com.wastemanagement.ui.dashboard.viewmodel.OrganizationViewModel", (Provider) organizationViewModelProvider()).put("com.wastemanagement.ui.dashboard.viewmodel.ProfileVIewModel", (Provider) profileVIewModelProvider()).build();
      }

      private static final class SwitchingProvider<T> implements Provider<T> {
        private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ViewModelCImpl viewModelCImpl;

        private final int id;

        SwitchingProvider(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.viewModelCImpl = viewModelCImpl;
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.wastemanagement.ui.auth.viewmodel.AuthViewModel 
            return (T) viewModelCImpl.authViewModel();

            case 1: // com.wastemanagement.ui.dashboard.viewmodel.CategoryViewModel 
            return (T) viewModelCImpl.categoryViewModel();

            case 2: // com.wastemanagement.ui.dashboard.viewmodel.DonationRequestViewModel 
            return (T) viewModelCImpl.donationRequestViewModel();

            case 3: // com.wastemanagement.ui.dashboard.viewmodel.OrganizationViewModel 
            return (T) viewModelCImpl.organizationViewModel();

            case 4: // com.wastemanagement.ui.dashboard.viewmodel.ProfileVIewModel 
            return (T) viewModelCImpl.profileVIewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private static final class ServiceCBuilder implements WasteManagementApp_HiltComponents.ServiceC.Builder {
    private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public WasteManagementApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ServiceCImpl extends WasteManagementApp_HiltComponents.ServiceC {
    private final DaggerWasteManagementApp_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerWasteManagementApp_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }
}
